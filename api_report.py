# import pandas as pd
# import requests
# import streamlit as st
# from api import post_json, PARAMS, HEADERS
# from pathlib import Path
# import datetime
# import time, sqlite3
# import logging

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)

# def get_main_group():
#     try:
#         data_group = '{"CRC":"","Packet":{"FromId":"10003001","ServerKey":"omt5W465fjwlrtxcEco97kew2dkdrorqqq","Data":{}}}'
#         response = requests.post('https://api.infoprice.by/InfoPrice.GoodsGroup', params=PARAMS, headers=HEADERS, data=data_group, timeout=30)
#         response.raise_for_status()
#         main_group = response.json()
#         return {i['GoodsGroupName']: [i['GoodsGroupId'], i['Child']] for i in main_group['Table']}
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {e}")
#         return {}

# def create_data_group(group_id, page="", is_promo=False):
#     promo_flag = 1 if is_promo else 0
#     data = f'{{"CRC":"","Packet":{{"FromId":"10003001","ServerKey":"omt5W465fjwlrtxcEco97kew2dkdrorqqq","Data":{{"ContractorId":"","GoodsGroupId":"{group_id}","Page":"{page}","Search":"","OrderBy":0,"OrderByContractor":0,"Compare–°ontractorId":72631,"CatalogType":1,"IsAgeLimit":0,"IsPromotionalPrice":{promo_flag}}}}}}}'
#     return data.encode()

# def get_price_group(group_id, page, is_promo=False):
#     try:
#         data_price = create_data_group(group_id, page=page, is_promo=is_promo)
#         response = requests.post('https://api.infoprice.by/InfoPrice.Goods', params=PARAMS, headers=HEADERS, data=data_price, timeout=60)
#         response.raise_for_status()
#         return response.json()
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {'–ø—Ä–æ–º–æ-' if is_promo else ''}—Ü–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
#         return None

# def process_goods(goods, main_name, is_promo=False):
#     processed_data = []
    
#     if 'GoodsOffer' not in goods or not goods['GoodsOffer']:
#         return processed_data
        
#     for data_good in goods['GoodsOffer']:
#         try:
#             goods_group_name = data_good.get('GoodsGroupName', '')
#             goods_name = data_good.get('GoodsName', '').rstrip()
#             goods_id = data_good.get('GoodsId', '')
            
#             if not goods_id:
#                 continue
                
#             prices = {72494: 0.00, 72512: 0.00, 72511: 0.00, 72517: 0.00, 72468: 0.00, 72526: 0.00}
            
#             if 'Offers' in data_good and data_good['Offers']:
#                 for price_contractor in data_good['Offers']:
#                     contractor_id = price_contractor.get('ContractorId')
#                     if contractor_id in prices:
#                         if not is_promo or (is_promo and price_contractor.get('IsPromotionalPrice', False)):
#                             try:
#                                 prices[contractor_id] = float(price_contractor.get('Price', 0))
#                             except:
#                                 prices[contractor_id] = 0.00
            
#             link = 'https://infoprice.by/?search=' + "+".join(goods_name.split(" "))
            
#             if is_promo:
#                 processed_data.append((goods_id, *prices.values()))
#             else:
#                 processed_data.append((goods_id, main_name, goods_group_name, goods_name, link, *prices.values()))
                
#         except Exception as e:
#             st.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
#             continue
            
#     return processed_data

# def safe_get_pages_count(data):
#     """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
#     try:
#         if data and 'Table' in data and data['Table']:
#             general_data = data['Table'][0].get('GeneralData', [{}])[0]
#             return general_data.get('AmountPages', 0)
#     except (IndexError, KeyError, TypeError):
#         pass
#     return 0

# def safe_get_goods_data(data):
#     """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
#     try:
#         if data and 'Table' in data and data['Table']:
#             for goods in data['Table']:
#                 general_data = goods.get('GeneralData', [{}])[0]
#                 amount_goods = general_data.get('AmountGoods', 0)
#                 if amount_goods > 0 and 'GoodsOffer' in goods:
#                     yield goods
#     except (IndexError, KeyError, TypeError):
#         pass

# def build_api_report():
#     """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API InfoPrice"""
#     st.header("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API InfoPrice")
#     st.write("‚è∞ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
#     with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."):
#         try:
#             test_response = requests.get('https://api.infoprice.by', timeout=10)
#             if test_response.status_code != 200:
#                 st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#                 return None
#         except:
#             st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
#             return None

#     # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
#     with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."):
#         main_group = get_main_group()
    
#     if not main_group:
#         st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤")
#         return None

#     # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
#     # if st.toggle("üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", value=True):
#     #     main_group = dict(list(main_group.items())[:3])
#     #     st.info(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {len(main_group)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

#     columns = [
#         'good_id', 'category', 'subcategory', 'name', 'link',
#         'sosedi', 'sosedi_promo', 'korona', 'korona_promo', 
#         'gippo', 'gippo_promo', 'evroopt', 'evroopt_promo', 
#         'santa', 'santa_promo', 'green', 'green_promo'
#     ]
    
#     data_dict = {}
#     total_groups = sum(len(children) for _, children in main_group.values())
#     current_group = 0

#     # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
#     main_progress_bar = st.progress(0)
#     main_status_text = st.empty()

#     st.subheader("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    
#     for main_name in main_group.keys():
#         with st.expander(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {main_name}", expanded=False):
#             children = main_group[main_name][1]
            
#             for group in children:
#                 current_group += 1
#                 group_id = group['GoodsGroupId']
#                 group_name = group.get('GoodsGroupName', f'–ì—Ä—É–ø–ø–∞ {group_id}')
                
#                 # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
#                 progress = current_group / total_groups
#                 main_progress_bar.progress(progress)
#                 main_status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {group_name} ({current_group}/{total_groups})")
                
#                 st.write(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: {group_name}")
                
#                 try:
#                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω
#                     price_data = get_price_group(group_id, "")
#                     if price_data is None:
#                         st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É {group_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
#                         continue

#                     pages_count = safe_get_pages_count(price_data)
#                     if pages_count == 0:
#                         st.write(f"‚ÄÉ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø–µ {group_name}")
#                         continue

#                     # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω
#                     st.write(f"‚ÄÉüìÑ –û–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã: {pages_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
#                     page_progress_bar = st.progress(0)
#                     page_status = st.empty()
                    
#                     regular_count = 0
#                     for page in range(pages_count):
#                         page_status.text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages_count}")
#                         page_progress_bar.progress((page + 1) / pages_count)
                        
#                         prices_page = get_price_group(group_id, str(page))
#                         if prices_page is None:
#                             st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –≥—Ä—É–ø–ø—ã {group_name}")
#                             continue

#                         for goods in safe_get_goods_data(prices_page):
#                             processed_data = process_goods(goods, main_name)
#                             for row in processed_data:
#                                 good_id = row[0]
#                                 if good_id not in data_dict:
#                                     data_dict[good_id] = {col: 0.00 for col in columns}
#                                     data_dict[good_id]['good_id'] = good_id
#                                     data_dict[good_id]['category'] = row[1]
#                                     data_dict[good_id]['subcategory'] = row[2]
#                                     data_dict[good_id]['name'] = row[3]
#                                     data_dict[good_id]['link'] = row[4]
                                
#                                 # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
#                                 data_dict[good_id]['sosedi'] = row[5]
#                                 data_dict[good_id]['korona'] = row[6]
#                                 data_dict[good_id]['gippo'] = row[7]
#                                 data_dict[good_id]['evroopt'] = row[8]
#                                 data_dict[good_id]['santa'] = row[9]
#                                 data_dict[good_id]['green'] = row[10]
#                                 regular_count += 1

#                         # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
#                         time.sleep(0.1)
                    
#                     # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
#                     page_progress_bar.empty()
#                     page_status.empty()

#                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ-—Ü–µ–Ω
#                     promo_count = 0
#                     price_promo_data = get_price_group(group_id, "", is_promo=True)
#                     if price_promo_data:
#                         promo_pages_count = safe_get_pages_count(price_promo_data)
                        
#                         if promo_pages_count > 0:
#                             st.write(f"‚ÄÉüéØ –ü—Ä–æ–º–æ-—Ü–µ–Ω—ã: {promo_pages_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
#                             promo_progress_bar = st.progress(0)
#                             promo_status = st.empty()
                            
#                             for page in range(promo_pages_count):
#                                 promo_status.text(f"–ü—Ä–æ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{promo_pages_count}")
#                                 promo_progress_bar.progress((page + 1) / promo_pages_count)
                                
#                                 prices_promo_page = get_price_group(group_id, str(page), is_promo=True)
#                                 if prices_promo_page is None:
#                                     continue

#                                 for goods in safe_get_goods_data(prices_promo_page):
#                                     processed_promo_data = process_goods(goods, main_name, is_promo=True)
#                                     for row in processed_promo_data:
#                                         good_id = row[0]
#                                         if good_id in data_dict:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
#                                             data_dict[good_id]['sosedi_promo'] = row[1]
#                                             data_dict[good_id]['korona_promo'] = row[2]
#                                             data_dict[good_id]['gippo_promo'] = row[3]
#                                             data_dict[good_id]['evroopt_promo'] = row[4]
#                                             data_dict[good_id]['santa_promo'] = row[5]
#                                             data_dict[good_id]['green_promo'] = row[6]
#                                             promo_count += 1

#                                 # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
#                                 time.sleep(0.1)
                            
#                             # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–æ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü
#                             promo_progress_bar.empty()
#                             promo_status.empty()

#                     st.success(f"‚ÄÉ‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {regular_count} –æ–±—ã—á–Ω—ã—Ö + {promo_count} –ø—Ä–æ–º–æ")

#                 except Exception as e:
#                     st.error(f"‚ÄÉ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
#                     continue
                
#                 time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏

#     # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
#     main_progress_bar.empty()
#     main_status_text.empty()
    
#     if data_dict:
#         st.success(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data_dict):,}")
        
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
#         st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:")
#         stats_data = []
#         shops = ['sosedi', 'korona', 'gippo', 'evroopt', 'santa', 'green']
#         for shop in shops:
#             shop_count = sum(1 for product in data_dict.values() if product.get(shop, 0) > 0)
#             promo_count = sum(1 for product in data_dict.values() if product.get(f"{shop}_promo", 0) > 0)
#             stats_data.append({
#                 '–ú–∞–≥–∞–∑–∏–Ω': shop,
#                 '–¢–æ–≤–∞—Ä–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏': shop_count,
#                 '–¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–º–æ —Ü–µ–Ω–∞–º–∏': promo_count
#             })
        
#         st.dataframe(pd.DataFrame(stats_data))
        
#         return {
#             'data': data_dict,
#             'columns': columns,
#             'stats': {
#                 'total_products': len(data_dict),
#                 'total_groups': total_groups
#             }
#         }
#     else:
#         st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
#         return None

# def post_merge(src_file: Path | str) -> Path:
#     """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã"""
#     src_file = Path(src_file)
#     db_file = Path("products.db")

#     if not src_file.exists():
#         st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {src_file}")
#         return src_file

#     if not db_file.exists():
#         st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ë–î: {db_file}")
#         return src_file

#     # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
#     df_main = pd.read_excel(src_file)
    
#     with sqlite3.connect(db_file, check_same_thread=False) as conn:
#         df_bc = pd.read_sql("SELECT name, barcode FROM barcode", conn)

#     # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
#     df = pd.merge(df_main, df_bc, how="left", on="name")
#     df = df.loc[:, ~df.columns.str.contains("^Unnamed: 0$")]

#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
#     ts = datetime.datetime.now().strftime("%d%m%Y_%H%M")
#     out_file = src_file.with_name(f"full{ts}.xlsx")
#     df.to_excel(out_file, index=False)

#     st.success(f"Post-merge –∑–∞–≤–µ—Ä—à—ë–Ω: {out_file.name}")
#     return out_file


import pandas as pd
import requests
import streamlit as st
from api import post_json, PARAMS, HEADERS
from pathlib import Path
import datetime
import time, sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_main_group():
    try:
        data_group = '{"CRC":"","Packet":{"FromId":"10003001","ServerKey":"omt5W465fjwlrtxcEco97kew2dkdrorqqq","Data":{}}}'
        response = requests.post('https://api.infoprice.by/InfoPrice.GoodsGroup', params=PARAMS, headers=HEADERS, data=data_group, timeout=30)
        response.raise_for_status()
        main_group = response.json()
        return {i['GoodsGroupName']: [i['GoodsGroupId'], i['Child']] for i in main_group['Table']}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {e}")
        return {}

def create_data_group(group_id, page="", is_promo=False):
    promo_flag = 1 if is_promo else 0
    data = f'{{"CRC":"","Packet":{{"FromId":"10003001","ServerKey":"omt5W465fjwlrtxcEco97kew2dkdrorqqq","Data":{{"ContractorId":"","GoodsGroupId":"{group_id}","Page":"{page}","Search":"","OrderBy":0,"OrderByContractor":0,"Compare–°ontractorId":72631,"CatalogType":1,"IsAgeLimit":0,"IsPromotionalPrice":{promo_flag}}}}}}}'
    return data.encode()

def get_price_group(group_id, page, is_promo=False):
    try:
        data_price = create_data_group(group_id, page=page, is_promo=is_promo)
        response = requests.post('https://api.infoprice.by/InfoPrice.Goods', params=PARAMS, headers=HEADERS, data=data_price, timeout=60)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {'–ø—Ä–æ–º–æ-' if is_promo else ''}—Ü–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
        return None

def process_goods(goods, main_name, is_promo=False):
    processed_data = []
    
    if 'GoodsOffer' not in goods or not goods['GoodsOffer']:
        return processed_data
        
    for data_good in goods['GoodsOffer']:
        try:
            goods_group_name = data_good.get('GoodsGroupName', '')
            goods_name = data_good.get('GoodsName', '').rstrip()
            goods_id = data_good.get('GoodsId', '')
            
            if not goods_id:
                continue
                
            prices = {72494: 0.00, 72512: 0.00, 72511: 0.00, 72517: 0.00, 72468: 0.00, 72526: 0.00}
            
            if 'Offers' in data_good and data_good['Offers']:
                for price_contractor in data_good['Offers']:
                    contractor_id = price_contractor.get('ContractorId')
                    if contractor_id in prices:
                        if not is_promo or (is_promo and price_contractor.get('IsPromotionalPrice', False)):
                            try:
                                prices[contractor_id] = float(price_contractor.get('Price', 0))
                            except:
                                prices[contractor_id] = 0.00
            
            link = 'https://infoprice.by/?search=' + "+".join(goods_name.split(" "))
            
            if is_promo:
                processed_data.append((goods_id, *prices.values()))
            else:
                processed_data.append((goods_id, main_name, goods_group_name, goods_name, link, *prices.values()))
                
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            continue
            
    return processed_data

def safe_get_pages_count(data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        if data and 'Table' in data and data['Table']:
            general_data = data['Table'][0].get('GeneralData', [{}])[0]
            return general_data.get('AmountPages', 0)
    except (IndexError, KeyError, TypeError):
        pass
    return 0

def safe_get_goods_data(data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    try:
        if data and 'Table' in data and data['Table']:
            for goods in data['Table']:
                general_data = goods.get('GeneralData', [{}])[0]
                amount_goods = general_data.get('AmountGoods', 0)
                if amount_goods > 0 and 'GoodsOffer' in goods:
                    yield goods
    except (IndexError, KeyError, TypeError):
        pass

def has_regular_prices(prices_row):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ–Ω—É–ª–µ–≤–∞—è –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞"""
    regular_price_columns = [5, 6, 7, 8, 9, 10]  # –ò–Ω–¥–µ–∫—Å—ã –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω –≤ row
    return any(prices_row[i] > 0 for i in regular_price_columns)

def build_api_report():
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API InfoPrice"""
    st.header("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API InfoPrice")
    st.write("‚è∞ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."):
        try:
            test_response = requests.get('https://api.infoprice.by', timeout=10)
            if test_response.status_code != 200:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
        except:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
            return None

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."):
        main_group = get_main_group()
    
    if not main_group:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return None

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    # if st.toggle("üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", value=True):
    #     main_group = dict(list(main_group.items())[:3])
    #     st.info(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {len(main_group)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    columns = [
        'good_id', 'category', 'subcategory', 'name', 'link',
        'sosedi', 'sosedi_promo', 'korona', 'korona_promo', 
        'gippo', 'gippo_promo', 'evroopt', 'evroopt_promo', 
        'santa', 'santa_promo', 'green', 'green_promo'
    ]
    
    data_dict = {}
    total_groups = sum(len(children) for _, children in main_group.values())
    current_group = 0

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    main_progress_bar = st.progress(0)
    main_status_text = st.empty()

    st.subheader("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    
    for main_name in main_group.keys():
        with st.expander(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {main_name}", expanded=False):
            children = main_group[main_name][1]
            
            for group in children:
                current_group += 1
                group_id = group['GoodsGroupId']
                group_name = group.get('GoodsGroupName', f'–ì—Ä—É–ø–ø–∞ {group_id}')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = current_group / total_groups
                main_progress_bar.progress(progress)
                main_status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {group_name} ({current_group}/{total_groups})")
                
                st.write(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: {group_name}")
                
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω
                    price_data = get_price_group(group_id, "")
                    if price_data is None:
                        st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É {group_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                        continue

                    pages_count = safe_get_pages_count(price_data)
                    if pages_count == 0:
                        st.write(f"‚ÄÉ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø–µ {group_name}")
                        continue

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω
                    st.write(f"‚ÄÉüìÑ –û–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã: {pages_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                    page_progress_bar = st.progress(0)
                    page_status = st.empty()
                    
                    regular_count = 0
                    valid_products_count = 0  # –°—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
                    
                    for page in range(pages_count):
                        page_status.text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages_count}")
                        page_progress_bar.progress((page + 1) / pages_count)
                        
                        prices_page = get_price_group(group_id, str(page))
                        if prices_page is None:
                            st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –≥—Ä—É–ø–ø—ã {group_name}")
                            continue

                        for goods in safe_get_goods_data(prices_page):
                            processed_data = process_goods(goods, main_name)
                            for row in processed_data:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
                                if has_regular_prices(row):
                                    good_id = row[0]
                                    if good_id not in data_dict:
                                        data_dict[good_id] = {col: 0.00 for col in columns}
                                        data_dict[good_id]['good_id'] = good_id
                                        data_dict[good_id]['category'] = row[1]
                                        data_dict[good_id]['subcategory'] = row[2]
                                        data_dict[good_id]['name'] = row[3]
                                        data_dict[good_id]['link'] = row[4]
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
                                    data_dict[good_id]['sosedi'] = row[5]
                                    data_dict[good_id]['korona'] = row[6]
                                    data_dict[good_id]['gippo'] = row[7]
                                    data_dict[good_id]['evroopt'] = row[8]
                                    data_dict[good_id]['santa'] = row[9]
                                    data_dict[good_id]['green'] = row[10]
                                    valid_products_count += 1
                                
                                regular_count += 1

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                        time.sleep(0.1)
                    
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
                    page_progress_bar.empty()
                    page_status.empty()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ-—Ü–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
                    promo_count = 0
                    if valid_products_count > 0:
                        price_promo_data = get_price_group(group_id, "", is_promo=True)
                        if price_promo_data:
                            promo_pages_count = safe_get_pages_count(price_promo_data)
                            
                            if promo_pages_count > 0:
                                st.write(f"‚ÄÉüéØ –ü—Ä–æ–º–æ-—Ü–µ–Ω—ã: {promo_pages_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                                promo_progress_bar = st.progress(0)
                                promo_status = st.empty()
                                
                                for page in range(promo_pages_count):
                                    promo_status.text(f"–ü—Ä–æ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{promo_pages_count}")
                                    promo_progress_bar.progress((page + 1) / promo_pages_count)
                                    
                                    prices_promo_page = get_price_group(group_id, str(page), is_promo=True)
                                    if prices_promo_page is None:
                                        continue

                                    for goods in safe_get_goods_data(prices_promo_page):
                                        processed_promo_data = process_goods(goods, main_name, is_promo=True)
                                        for row in processed_promo_data:
                                            good_id = row[0]
                                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ-—Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ data_dict
                                            if good_id in data_dict:
                                                data_dict[good_id]['sosedi_promo'] = row[1]
                                                data_dict[good_id]['korona_promo'] = row[2]
                                                data_dict[good_id]['gippo_promo'] = row[3]
                                                data_dict[good_id]['evroopt_promo'] = row[4]
                                                data_dict[good_id]['santa_promo'] = row[5]
                                                data_dict[good_id]['green_promo'] = row[6]
                                                promo_count += 1

                                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                    time.sleep(0.1)
                                
                                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–æ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü
                                promo_progress_bar.empty()
                                promo_status.empty()
                    else:
                        st.write(f"‚ÄÉ‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ {group_name} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏, –ø—Ä–æ–º–æ-—Ü–µ–Ω—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")

                    st.success(f"‚ÄÉ‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {valid_products_count} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∏–∑ {regular_count} –≤—Å–µ–≥–æ) + {promo_count} –ø—Ä–æ–º–æ")

                except Exception as e:
                    st.error(f"‚ÄÉ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
                    continue
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏

    # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    main_progress_bar.empty()
    main_status_text.empty()
    
    if data_dict:
        st.success(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data_dict):,}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:")
        stats_data = []
        shops = ['sosedi', 'korona', 'gippo', 'evroopt', 'santa', 'green']
        for shop in shops:
            shop_count = sum(1 for product in data_dict.values() if product.get(shop, 0) > 0)
            promo_count = sum(1 for product in data_dict.values() if product.get(f"{shop}_promo", 0) > 0)
            stats_data.append({
                '–ú–∞–≥–∞–∑–∏–Ω': shop,
                '–¢–æ–≤–∞—Ä–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏': shop_count,
                '–¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–º–æ —Ü–µ–Ω–∞–º–∏': promo_count
            })
        
        st.dataframe(pd.DataFrame(stats_data))
        
        return {
            'data': data_dict,
            'columns': columns,
            'stats': {
                'total_products': len(data_dict),
                'total_groups': total_groups
            }
        }
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return None

def post_merge(src_file: Path | str) -> Path:
    """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã"""
    src_file = Path(src_file)
    db_file = Path("products.db")

    if not src_file.exists():
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {src_file}")
        return src_file

    if not db_file.exists():
        st.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ë–î: {db_file}")
        return src_file

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    df_main = pd.read_excel(src_file)
    
    with sqlite3.connect(db_file, check_same_thread=False) as conn:
        df_bc = pd.read_sql("SELECT name, barcode FROM barcode", conn)

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    df = pd.merge(df_main, df_bc, how="left", on="name")
    df = df.loc[:, ~df.columns.str.contains("^Unnamed: 0$")]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    ts = datetime.datetime.now().strftime("%d%m%Y_%H%M")
    out_file = src_file.with_name(f"full{ts}.xlsx")
    df.to_excel(out_file, index=False)

    st.success(f"Post-merge –∑–∞–≤–µ—Ä—à—ë–Ω: {out_file.name}")
    return out_file