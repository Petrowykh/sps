# sps ‚Äì system of parsing (Sosedi)
# version 0.4  (auth + —É–±—Ä–∞–Ω–æ streamlit-option-menu)

import streamlit as st
import pandas as pd
from datetime import datetime
from pathlib import Path

import myparser as mp
#import myutils as mu

# ----------  AUTH  ----------
USERS_FILE = Path("users.txt")   # login:hash  (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äì –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

def _load_users() -> dict[str, str]:
    """{login: password}"""
    if not USERS_FILE.exists():
        # —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–∑–∞–ø–∏—Å—å
        USERS_FILE.write_text("demo:123\n")
    users = {}
    for line in USERS_FILE.read_text().splitlines():
        if ":" in line:
            login, pwd = line.strip().split(":", 1)
            users[login] = pwd
    return users

def check_password(login: str, password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
    users = _load_users()
    return users.get(login) == password

def login_form():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ —Å—Ç–∞–≤–∏—Ç st.session_state['auth']=True"""
    st.title("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    with st.form("login"):
        login = st.text_input("–õ–æ–≥–∏–Ω")
        pwd   = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.form_submit_button("–í–æ–π—Ç–∏"):
            if check_password(login, pwd):
                st.session_state["auth"] = True
                st.session_state["user"] = login
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# ----------  UI  ----------
def info():
    st.sidebar.title('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
    barcode = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ —à/–∫')
    if st.sidebar.button('–ò—â–µ–º'):
        try:
            with st.spinner('–ò—â–µ–º —Ç–æ–≤–∞—Ä...'):
                infoprice = mp.ParserInfoAll()
                link = f'https://infoprice.by/?search= {barcode}&filter%5B%5D=72494&filter%5B%5D=72468&filter%5B%5D=72512&filter%5B%5D=72517&filter%5B%5D=72511&filter%5B%5D=72526'
                st.text(link)
                name, rrr, ddd = infoprice.get_price(link)
                if name != '–ù–µ –Ω–∞–π–¥–µ–Ω':
                    st.subheader(name)
                    st.table(rrr)
                    st.table(ddd)
                else:
                    st.warning('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
                infoprice.close()
        except Exception as e:
            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}')

def reports():
    st.sidebar.title('–û—Ç—á–µ—Ç—ã')
    type_report = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç', ('TOP-1000', 'CTM'))
    email = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ email', placeholder='email@mail.ru')
    if not st.sidebar.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å'):
        return
    try:
        sku = pd.read_excel('excel/new3.xlsx')
        if sku.empty:
            st.warning("–§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        st.table(sku.head(5))
        total_items = sku.shape[0]
        parse_bar = st.progress(0, '–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥')

        result_dict = {
            'name': [], 'barcode': [], 'link_foto': [],
            'min_price': [], 'promo': [], 'sosedi': [],
            'santa': [], 'korona': [], 'evroopt': [],
            'gippo': [], 'grin': []
        }
        infoprice = mp.ParserInfoAll()
        for count, barcode in enumerate(sku['barcode']):
            try:
                parse_bar.progress(int((count + 1) / total_items * 100))
                barcode = str(int(barcode)) if pd.notna(barcode) else '0'
                link = f'https://infoprice.by/?search= {barcode}&filter%5B%5D=72494&filter%5B%5D=72468&filter%5B%5D=72512&filter%5B%5D=72517&filter%5B%5D=72511&filter%5B%5D=72526'
                name, min_price, promo, rrr = infoprice.get_price(link)
                print(f"{name}, {barcode}")
                if name != '–ù–µ –Ω–∞–π–¥–µ–Ω':
                    result_dict['name'].append(name)
                    result_dict['link_foto'].append(link)
                    result_dict['min_price'].append(min_price)
                    result_dict['promo'].append(promo if promo != 10000.0 else 0.0)
                    result_dict['barcode'].append(barcode)
                    shops_mapping = {
                        'sosedi': '–°–æ—Å–µ–¥–∏', 'santa': '–°–∞–Ω—Ç–∞', 'korona': '–ö–æ—Ä–æ–Ω–∞',
                        'evroopt': '–ï–≤—Ä–æ–æ–ø—Ç', 'gippo': '–ì–∏–ø–ø–æ', 'grin': '–ì—Ä–∏–Ω'
                    }
                    for code, shop_name in shops_mapping.items():
                        result_dict[code].append(rrr.get(shop_name, 0.0))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ {barcode}: {str(e)}")
                for key in result_dict:
                    result_dict[key].append(0.0 if key in ['min_price', 'promo', 'sosedi', 'santa', 'korona', 'evroopt', 'gippo', 'grin'] else '')
                continue
        result_df = pd.DataFrame.from_dict(result_dict).fillna(0.0)
        filename = f"report_{datetime.now().strftime('%d%m%Y_%H%M')}.xlsx"
        result_df.to_excel(filename)
        st.success(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}")
        st.table(result_df.head(10))
    except Exception as e:
        st.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}')
    finally:
        if 'infoprice' in locals():
            infoprice.close()

def settings():
    st.sidebar.title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")

# ----------  MAIN  ----------
def main():
    st.set_page_config(
        page_title="Sosedi Parsing System",
        page_icon="üßä",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    if not st.session_state.get("auth", False):
        login_form()
        st.stop()

    # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ –º–µ–Ω—é-–ø–µ—Ä–µ–∫–ª—é—á–∞–ª–∫—É
    col_img, col_header = st.columns([1, 2])
    col_img.image('img/logo.png', width=200)
    col_header.header('–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö')

    menu = st.sidebar.radio(
        "–†–∞–∑–¥–µ–ª—ã",
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        index=0
    )
    if menu == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info()
    elif menu == "–û—Ç—á–µ—Ç—ã":
        reports()
    elif menu == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings()

if __name__ == '__main__':
    main()