# sps ‚Äì system of parsing (Sosedi)
# version 0.4  (auth + —É–±—Ä–∞–Ω–æ streamlit-option-menu)

import streamlit as st
import pandas as pd
from datetime import datetime
from api_report import build_api_report, post_merge
from pathlib import Path
from infoparser import get_price_by_barcode
#import myutils as mu

# ----------  AUTH  ----------
# ---------- –í–†–ï–ú–ï–ù–ù–û: –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã ----------
LOGIN = "admin"
PASSWORD = "12345"
# ---------------------------------------------


def check_password(pw: str) -> bool:
    return pw == PASSWORD

def login_form():
    with st.form("login"):
        pw = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.form_submit_button("–í–æ–π—Ç–∏"):
            if check_password(pw):
                st.session_state["auth"] = True
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")


def info():

    st.title("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É")
    col1, col2 = st.columns([3, 1])
    with col1:
        barcode = st.text_input("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥", key="barcode_input")
    with col2:
        search = st.button("–ò—Å–∫–∞—Ç—å", type="primary", key="search_btn")

    if search and barcode.strip():          # –Ω–∞–∂–∞–ª–∏ –∏ –≤–≤–µ–ª–∏
        try:
            with st.spinner("–ò—â–µ–º —Ç–æ–≤–∞—Ä..."):
                link = f"https://infoprice.by/?search={barcode.strip()}"
                st.markdown(f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]({link})")

                info = get_price_by_barcode(barcode.strip())
                name, min_price, min_promo, shops = info.name, info.min_price, info.min_promo, info.shops

                if name != "–ù–µ –Ω–∞–π–¥–µ–Ω":
                    st.success(f"**{name}**")
                    c1, c2 = st.columns(2)
                    c1.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min_price:.2f} BYN")
                    if min_promo and min_promo != min_price:
                        c2.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–º–æ-—Ü–µ–Ω–∞", f"{min_promo:.2f} BYN")

                    st.subheader("–¶–µ–Ω—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
                    st.dataframe(shops, width="stretch")
                else:
                    st.error("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    elif search and not barcode.strip():    # –Ω–∞–∂–∞–ª–∏, –Ω–æ –Ω–µ –≤–≤–µ–ª–∏
        st.warning("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥")


def reports():
    try:
        sku = pd.read_excel('excel/new3.xlsx')
        if sku.empty:
            st.warning("–§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        st.table(sku.head(5))
        total_items = sku.shape[0]
        parse_bar = st.progress(0, '–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥')

        result_dict = {
            'name': [], 'barcode': [], 'link_foto': [],
            'min_price': [], 'promo': [], 'sosedi': [],
            'santa': [], 'korona': [], 'evroopt': [],
            'gippo': [], 'grin': []
        }

        # --------------  HTTP-–≤–∞—Ä–∏–∞–Ω—Ç  --------------

        for count, barcode in enumerate(sku['barcode']):
            try:
                parse_bar.progress(int((count + 1) / total_items * 100))
                barcode = str(int(barcode)) if pd.notna(barcode) else '0'

                info = get_price_by_barcode(barcode)
                name, min_price, promo, rrr = info.name, info.min_price, info.min_promo, info.shops

                if name != '–ù–µ –Ω–∞–π–¥–µ–Ω–æ':
                    result_dict['name'].append(name)
                    link = f"https://infoprice.by/?search={barcode}"
                    result_dict['link_foto'].append(link)
                    result_dict['min_price'].append(min_price)   # ‚Üê —Å—é–¥–∞ –ø–∏—à–µ–º
                    result_dict['promo'].append(promo if promo != 10000.0 else 0.0)
                    result_dict['barcode'].append(barcode)

                    shops_mapping = {
                        'sosedi': '–°–æ—Å–µ–¥–∏', 'santa': '–°–∞–Ω—Ç–∞', 'korona': '–ö–æ—Ä–æ–Ω–∞',
                        'evroopt': '–ï–≤—Ä–æ–æ–ø—Ç', 'gippo': '–ì–∏–ø–ø–æ', 'grin': '–ì—Ä–∏–Ω'
                    }
                    for code, shop_name in shops_mapping.items():
                        result_dict[code].append(rrr.get(shop_name, 0.0))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ {barcode}: {str(e)}")
                for key in result_dict:
                    result_dict[key].append(0.0 if key in ['min_price', 'promo', 'sosedi', 'santa', 'korona', 'evroopt', 'gippo', 'grin'] else '')
                continue

        result_df = pd.DataFrame.from_dict(result_dict).fillna(0.0)
        filename = f"report_{datetime.now().strftime('%d%m%Y')}.xlsx"
        result_df.insert(0, "‚Ññ", range(1, len(result_df) + 1))
        result_df.to_excel(filename, sheet_name="–ü–∞—Ä—Å–∏–Ω–≥ 400", index=False)

        with open(filename, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                data=f,
                file_name=filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        st.success(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}")

    except Exception as e:
        st.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}')


def api_report():
    ts = datetime.now().strftime("%d%m%Y")
    raw_file = Path(f"api_report_{ts}.xlsx")
    
    build_api_report(raw_file)

# ----------  MAIN  ----------
def main():
    st.set_page_config(
        page_title="Sosedi Parsing System",
        page_icon="üßä",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    if not st.session_state.get("auth", False):
        login_form()
        st.stop()

    # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É –∏ –º–µ–Ω—é-–ø–µ—Ä–µ–∫–ª—é—á–∞–ª–∫—É
    col_img, col_header = st.columns([1, 2])
    col_img.image('img/logo.png', width=200)
    col_header.header('–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö')

    menu = st.sidebar.radio(
        "–†–∞–∑–¥–µ–ª—ã",
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –¢–û–ü 400", "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"],
        key="main_menu",
    )

    # –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å¬ª ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚Äì —Å–≤–æ—è –≤–Ω—É—Ç—Ä–∏ info()
    if menu != "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        btn_text = {"–û—Ç—á–µ—Ç –¢–û–ü 400": "üìä –°–¥–µ–ª–∞—Ç—å", "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç": "üì¶ –°–¥–µ–ª–∞—Ç—å"}.get(menu, "–í—ã–ø–æ–ª–Ω–∏—Ç—å")
        if st.sidebar.button(btn_text, type="primary", key="exec_btn"):
            if menu == "–û—Ç—á–µ—Ç –¢–û–ü 400":
                reports()
            elif menu == "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç":
                api_report()
    else:
        info()
    
    

if __name__ == '__main__':
    main()