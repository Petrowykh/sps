# app.py
import streamlit as st
import pandas as pd
from datetime import datetime
from api_report import build_api_report, post_merge
from pathlib import Path
from infoparser import get_price_by_barcode
import sqlite3

# ----------  AUTH  ----------
LOGIN = "admin"
PASSWORD = "12345"
DB_FILE = "products.db"
# ----------------------------

# –∫–ª—é—á-—Ñ–ª–∞–≥ ¬´–ø–∞—Ä—Å–∏–Ω–≥ –∏–¥—ë—Ç¬ª
LOCK_KEY = "running"

# ----------  UTILS  ----------
def check_password(pw: str) -> bool:
    return pw == PASSWORD

def login_form():
    with st.form("login"):
        pw = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.form_submit_button("–í–æ–π—Ç–∏"):
            if check_password(pw):
                st.session_state["auth"] = True
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

# ----------  UI  ----------
def info():
    st.title("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É")
    col1, col2 = st.columns([3, 1])
    with col1:
        barcode = st.text_input("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥", key="barcode_input")
    with col2:
        search = st.button("–ò—Å–∫–∞—Ç—å", type="primary", key="search_btn")

    if search and barcode.strip():
        try:
            with st.spinner("–ò—â–µ–º —Ç–æ–≤–∞—Ä..."):
                link = f"https://infoprice.by/?search={barcode.strip()}"
                st.markdown(f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]({link})")
                info = get_price_by_barcode(barcode.strip())
                name, min_price, min_promo, shops = info.name, info.min_price, info.min_promo, info.shops
                if name != "–ù–µ –Ω–∞–π–¥–µ–Ω":
                    st.success(f"**{name}**")
                    c1, c2 = st.columns(2)
                    c1.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min_price:.2f} BYN")
                    if min_promo and min_promo != min_price:
                        c2.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–º–æ-—Ü–µ–Ω–∞", f"{min_promo:.2f} BYN")
                    st.subheader("–¶–µ–Ω—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
                    st.dataframe(shops, width="stretch")
                else:
                    st.error("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    elif search and not barcode.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥")

@st.cache_data(show_spinner=False)
def _load_products() -> pd.DataFrame:
    with sqlite3.connect(DB_FILE, check_same_thread=False) as c:
        return pd.read_sql("SELECT barcode, name FROM top", c)

# ----------  REPORTS  ----------
def reports():
    st.session_state[LOCK_KEY] = True
    try:
        with st.spinner("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            sku = _load_products()
        if sku.empty:
            st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", f"{sku.shape[0]:,}")
        with col2:
            st.metric("üìÖ –î–∞—Ç–∞", datetime.now().strftime("%d.%m.%Y"))
        with col3:
            st.metric("‚è∞ –í—Ä–µ–º—è", datetime.now().strftime("%H:%M"))
        progress_container = st.empty()
        status_text = st.empty()
        total_items = sku.shape[0]
        result_dict = {
            'name': [], 'barcode': [], 'link_foto': [],
            'min_price': [], 'promo': [], 'sosedi': [],
            'santa': [], 'korona': [], 'evroopt': [],
            'gippo': [], 'grin': []
        }
        for count, (_, row) in enumerate(sku.iterrows()):
            progress = int((count + 1) / total_items * 100)
            progress_container.progress(progress)
            status_text.text(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä {count + 1} –∏–∑ {total_items}...")
            barcode = str(int(row['barcode'])) if pd.notna(row['barcode']) else '0'
            try:
                info = get_price_by_barcode(barcode)
                if info.name != '–ù–µ –Ω–∞–π–¥–µ–Ω–æ':
                    result_dict['name'].append(info.name)
                    result_dict['link_foto'].append(f"https://infoprice.by/?search={barcode}")
                    result_dict['min_price'].append(info.min_price)
                    result_dict['promo'].append(0.0 if info.min_promo == 10000.0 else info.min_promo)
                    result_dict['barcode'].append(barcode)
                    shops_mapping = {
                        'sosedi': '–°–æ—Å–µ–¥–∏', 'santa': '–°–∞–Ω—Ç–∞', 'korona': '–ö–æ—Ä–æ–Ω–∞',
                        'evroopt': '–ï–≤—Ä–æ–æ–ø—Ç', 'gippo': '–ì–∏–ø–ø–æ', 'grin': '–ì—Ä–∏–Ω'
                    }
                    for code, shop_name in shops_mapping.items():
                        result_dict[code].append(info.shops.get(shop_name, 0.0))
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ {barcode}")
                for key in result_dict:
                    result_dict[key].append(0.0 if key in ['min_price', 'promo'] + list(shops_mapping.keys()) else '')
                continue
        progress_container.empty()
        status_text.empty()
        result_df = pd.DataFrame.from_dict(result_dict).fillna(0.0)
        result_df.insert(0, "‚Ññ", range(1, len(result_df) + 1))
        filename = f"report_{datetime.now().strftime('%d%m%Y_%H%M')}.xlsx"
        result_df.to_excel(filename, sheet_name="–ü–∞—Ä—Å–∏–Ω–≥", index=False)
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
            with open(filename, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=f,
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    width="stretch"
                )
        with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º"):
            shop_cols = ['sosedi', 'santa', 'korona', 'evroopt', 'gippo', 'grin']
            stats = {shop.title(): f"{(result_df[shop] > 0).sum()} —Ç–æ–≤–∞—Ä–æ–≤" for shop in shop_cols}
            stats_df = pd.DataFrame(list(stats.items()), columns=['–ú–∞–≥–∞–∑–∏–Ω', '–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤'])
            st.dataframe(stats_df, width="stretch")
    except Exception as e:
        st.error(f'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}')


def api_report():
    st.session_state[LOCK_KEY] = True
    try:
        ts = datetime.now().strftime("%d%m%Y")
        raw_file = Path(f"api_report_{ts}.xlsx")
        build_api_report(raw_file)
    finally:
        st.session_state[LOCK_KEY] = False
        st.rerun()

# ----------  MAIN  ----------
def main():
    st.set_page_config(
        page_title="Sosedi Parsing System",
        page_icon="üõí",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'mailto:a.petrowykh@gmail.com',
            'About': "–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö"
        }
    )
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #1f77b4;
            text-align: center;
            margin-bottom: 2rem;
        }
        .success-box {
            padding: 1rem;
            border-radius: 0.5rem;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
        }
    </style>
    """, unsafe_allow_html=True)

    if not st.session_state.get("auth", False):
        login_form()
        st.stop()

    col_img, col_header = st.columns([1, 2])
    col_img.image('img/logo.png', width=200)

    # ---------- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é ----------
    if st.session_state.get(LOCK_KEY, False):
        menu_opts = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚è≥ –ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥‚Ä¶"]
        disabled  = True          # –ë–õ–û–ö–ò–†–£–ï–ú –≤—Å—ë radio —Ü–µ–ª–∏–∫–æ–º
    else:
        menu_opts = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –¢–û–ü 400", "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"]
        disabled  = False

    menu = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", menu_opts, disabled=disabled)

    # ---------- –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å¬ª ----------
    if menu != "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" and not st.session_state.get(LOCK_KEY, False):
        btn_text = {"–û—Ç—á–µ—Ç –¢–û–ü 400": "üìä –°–¥–µ–ª–∞—Ç—å", "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç": "üì¶ –°–¥–µ–ª–∞—Ç—å"}.get(menu, "–í—ã–ø–æ–ª–Ω–∏—Ç—å")
        if st.sidebar.button(btn_text, type="primary"):
            if menu == "–û—Ç—á–µ—Ç –¢–û–ü 400":
                reports()
            elif menu == "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç":
                api_report()
    else:
        info()

if __name__ == '__main__':
    main()